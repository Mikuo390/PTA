//#define _CRT_SECURE_NO_WARNINGS
//
////本题要求编写程序，计算2个复数的和、差、积、商。
////
////输入格式：
////输入在一行中按照a1 b1 a2 b2的格式给出2个复数C1 = a1 + b1i和C2 = a2 + b2i的实部和虚部。
////题目保证C2不为0。
////
////输出格式：
////分别在4行中按照(a1 + b1i) 运算符(a2 + b2i) = 结果的格式顺序输出
////2个复数的和、差、积、商，数字精确到小数点后1位。
////如果结果的实部或者虚部为0，则不输出。如果结果为0，则输出0.0。
////
////输入样例1：
////2 3.08 - 2.04 5.06
////输出样例1：
////(2.0 + 3.1i) + (-2.0 + 5.1i) = 8.1i
////(2.0 + 3.1i) - (-2.0 + 5.1i) = 4.0 - 2.0i
////(2.0 + 3.1i) * (-2.0 + 5.1i) = -19.7 + 3.8i
////(2.0 + 3.1i) / (-2.0 + 5.1i) = 0.4 - 0.6i
////输入样例2：
////1 1 - 1 - 1.01
////输出样例2：
////(1.0 + 1.0i) + (-1.0 - 1.0i) = 0.0
////(1.0 + 1.0i) - (-1.0 - 1.0i) = 2.0 + 2.0i
////(1.0 + 1.0i) * (-1.0 - 1.0i) = -2.0i
////(1.0 + 1.0i) / (-1.0 - 1.0i) = -1.0
//
//#include<stdio.h>
//int main()
//{
//	double x1, x2, x3, x4, sp1, sp2, sp3;
//	scanf("%lf%lf%lf%lf", &x1, &x2, &x3, &x4);
//
//	printf("(%.1lf+.1%lfi) + (%.1lf+.1%lfi) = ", x1, x2, x3, x4);
//
//	printf("(%.1lf+.1%lfi) - (%.1lf+.1%lfi) = ", x1, x2, x3, x4);
//
//	printf("(%.1lf+.1%lfi) * (%.1lf+.1%lfi) = ", x1, x2, x3, x4);
//
//	printf("(%.1lf+.1%lfi) / (%.1lf+.1%lfi) = ", x1, x2, x3, x4);
//
//
//	return 0;
//}
//
#include<stdio.h>
void print(double m, double n)
{
	if (!(m<0.05 && m>-0.05))
	{
		printf("%.1lf", m);
		if (!(n<0.05 && n>-0.05))
			printf("%+.1lfi", n);
	}
	else if (!(n<0.05 && n>-0.05))
		printf("%.1lfi", n);
	if ((m<0.05 && m>-0.05) && (n<0.05 && n>-0.05))
		printf("0.0");
	printf("\n");
}
int main()
{
	double x1, x2, x3, x4, sp1, sp2, sp3;
	scanf("%lf%lf%lf%lf", &x1, &x2, &x3, &x4);
	printf("(%.1lf%+.1lfi) + (%.1lf%+.1lfi) = ", x1, x2, x3, x4);
	print(x1 + x3, x2 + x4);
	printf("(%.1lf%+.1lfi) - (%.1lf%+.1lfi) = ", x1, x2, x3, x4);
	print(x1 - x3, x2 - x4);
	printf("(%.1lf%+.1lfi) * (%.1lf%+.1lfi) = ", x1, x2, x3, x4);
	sp1 = x1 * x3 - x2 * x4;
	sp2 = x1 * x4 + x2 * x3;
	print(sp1, sp2);
	printf("(%.1lf%+.1lfi) / (%.1lf%+.1lfi) = ", x1, x2, x3, x4);
	sp3 = x3 * x3 + x4 * x4;
	sp1 = (x1 * x3 + x2 * x4) / sp3;
	sp2 = (-x1 * x4 + x2 * x3) / sp3;
	print(sp1, sp2);
	return 0;
}
