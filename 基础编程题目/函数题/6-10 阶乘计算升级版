////#define _CRT_SECURE_NO_WARNINGS
////
//////本题要求实现一个打印非负整数阶乘的函数。
//////
//////函数接口定义：
//////void Print_Factorial(const int N);
//////其中N是用户传入的参数，其值不超过1000。
//////如果N是非负整数，则该函数必须在一行中打印出N!的值，
//////否则打印“Invalid input”。
//////
//////裁判测试程序样例：
//////#include <stdio.h>
//////
//////void Print_Factorial(const int N);
//////
//////int main()
//////{
//////    int N;
//////
//////    scanf("%d", &N);
//////    Print_Factorial(N);
//////    return 0;
//////}
//////
///////* 你的代码将被嵌在这里 */
//////输入样例：
//////15
//////输出样例：
//////1307674368000
////
////#include <stdio.h>
////
////void Print_Factorial(const int N);
////
////int main()
////{
////    int N;
////
////    scanf("%d", &N);
////    Print_Factorial(N);
////    return 0;
////}
////void Print_Factorial(const int N)
////{
////    if (N >= 0 && N<=1000)
////    {
////        long long ret = 1;
////        for (int i = N; i != 0; i--)
////        {
////            ret *= i;
////        }
////        printf("%lld", ret);
////    }
////    else
////    {
////        printf("Invalid input");
////    }
////}
//
////重载
////struct bigint
////{
////    int buf[100];
////    int size;
////    //初始化
////    void init()
////    {
////        for (int i = 0; i < 100; i++)
////            buf[i] = 0;
////        size = 0;
////    }
////
////    //整数变大数
////    void set(int x)
////    {
////        init();
////        do
////        {
////            buf[size++] = x % 10000;
////            x = x / 10000;
////        } while (x != 0);
////    }
////
////    //大数乘法，重载*
////    bigint operator * (int  a) const
////    {
////        bigint ret;
////        ret.init();
////        int carry = 0;//进位
////        for (int i = 0; i < size; i++)
////        {
////            int tmp = buf[i] * a + carry;
////            ret.buf[ret.size++] = tmp % 10000;
////            carry = tmp / 10000;
////        }
////
////        if (carry != 0)
////            ret.buf[size++] = carry;
////
////        return ret;
////    }
////
////    //输出
////    void output()
////    {
////        for (int i = size - 1; i >= 0; i--)
////        {
////            if (i == size - 1)
////                printf("%d", buf[i]);
////            else
////                printf("%04d", buf[i]);
////        }
////
////        printf("\n");
////    }
////
////
////}sum;
////
////void Print_Factorial(const int N)
////{
////    if (N < 0)
////    {
////        printf("Invalid input");
////        return;
////    }
////
////    //struct bigint sum;
////    sum.init();
////    sum.set(1);
////    for (int i = 1; i <= N; i++)
////        sum = sum * i;
////    sum.output();
////    return;
////
////}
//
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void Print_Factorial(const int N);

int main()
{
    int N;

    scanf("%d", &N);
    Print_Factorial(N);
    return 0;
}
void print_factorial(const int n)
{
    int a[3000];
    int temp, num, digit;
    int i, j;
    a[0] = 1;
    digit = 1;
    if (n >= 0)
    {
        for (i = 2; i <= n; i++)
        {
            num = 0;
            for (j = 0; j < digit; j++)
            {
                temp = a[j] * i + num;
                a[j] = temp % 10;
                num = temp / 10;
            }
            while (num)
            {
                a[digit] = num % 10;
                num /= 10;
                digit++;
            }
        }
        for (i = digit - 1; i >= 0; i--)
        {
            printf("%d", a[i]);
        }
    }
    else
    {
        printf("invalid input");
    }
}

void Print_Factorial(const int N)
{
    if (N < 0)
    {
        printf("Invalid input\n");
        return;
    }
    int num[10000] = { 0 };
    int k = 1, n = 0;
    int i, j;
    int temp;
    num[0] = 1;
    for (i = 2; i <= N; i++)
    {
        for (j = 0; j < k; j++)
        {
            temp = num[j] * i + n;
            num[j] = temp % 10;
            n = temp / 10;
        }
        while (n)
        {
            num[k] = n % 10;
            n = n / 10;
            k++;
        }
    }
    for (i = k - 1; i >= 0; i--)
    {
        printf("%d", num[i]);
    }
}
