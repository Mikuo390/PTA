#define _CRT_SECURE_NO_WARNINGS

//本题要求实现一个函数，求N个集合元素A[]的中位数，
//即序列中第⌊(N + 1) / 2⌋大的元素。其中集合元素的类型为自定义的ElementType。
//
//函数接口定义：
//ElementType Median(ElementType A[], int N);
//其中给定集合元素存放在数组A[]中，正整数N是数组元素个数。
//该函数须返回N个A[]元素的中位数，其值也必须是ElementType类型。
//
//裁判测试程序样例：
//#include <stdio.h>
//
//#define MAXN 10
//typedef float ElementType;
//
//ElementType Median(ElementType A[], int N);
//
//int main()
//{
//    ElementType A[MAXN];
//    int N, i;
//
//    scanf("%d", &N);
//    for (i = 0; i < N; i++)
//        scanf("%f", &A[i]);
//    printf("%.2f\n", Median(A, N));
//
//    return 0;
//}
//
///* 你的代码将被嵌在这里 */
//输入样例：
//3
//12.3 34 - 5
//输出样例：
//12.30


//冒泡排序
//#include <stdio.h>
//
#define MAXN 10
typedef float ElementType;

ElementType Median(ElementType A[], int N);

int main()
{
    ElementType A[MAXN];
    int N, i;

    scanf("%d", &N);
    for (i = 0; i < N; i++)
        scanf("%f", &A[i]);
    printf("%.2f\n", Median(A, N));

    return 0;
}
void bubble_sort(ElementType A[], int N)
{
    for (int i = 0; i < N - 1; i++)
    {
        for (int j = 0; j < N - i - 1; j++)
        {
            if (A[j] > A[j + 1])
            {
                float tmp = A[j];
                A[j] = A[j + 1];
                A[j + 1] = tmp;
            }
        }
    }
}
ElementType Median(ElementType A[], int N)
{
    bubble_sort(A, N);
    if (N % 2 == 0)
        return  A[N / 2];
    else
        return  A[(N - 1) / 2];
}


#include <stdio.h>

#define MAXN 10
typedef float ElementType;

ElementType Median(ElementType A[], int N);

int main()
{
    ElementType A[MAXN];
    int N, i;

    scanf("%d", &N);
    for (i = 0; i < N; i++)
        scanf("%f", &A[i]);
    printf("%.2f\n", Median(A, N));

    return 0;
}

ElementType Median(ElementType A[], int N)
{
    ElementType temp;
    for (int gap = N / 2; gap > 0; gap = gap / 2)//gap是每次排序分组的间隔，每次间隔缩写两倍
    {
        for (int i = gap; i < N; i++)
        {
            for (int j = i - gap; j >= 0 && A[j] > A[j + gap]; j -= gap)
            {
                temp = A[j];
                A[j] = A[j + gap];
                A[j + gap] = temp;
            }
        }
    }
    return A[N / 2];
}

